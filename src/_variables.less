:root {
  --base-spacing: 45px; // works best with a value between 30px and 75px
  --font-size-post: 16px;
  --fonts-ui: "Helvetica Neue", Arial, Helvetica, "Liberation Sans", "Nimbus Sans L", FreeSans, sans-serif;
  --fonts-content: var(--fonts-ui);
  --fonts-heading: SansCn;
  --fonts-mono: "Fira Code", Menlo, Monaco, Consolas, "Lucida Console", "Liberation Mono", "DejaVu Sans Mono",
    "Bitstream Vera Sans Mono", "Courier New", monospace;
  --reading-width: 45; // use a unitless `em` value
  --card-max-column-count: 10;
  --card-min-column-width: 300px;
  --card-target-column-width: var(--card-min-column-width) * 1.15;
}

@base-spacing: var(--base-spacing);
@content-spacing: var(--content-spacing, var(--base-spacing));
@content-spacing-right: var(--content-spacing, ~"(@{base-spacing} + 4px)");
@content-spacing-left: var(--content-spacing, ~"(@{base-spacing} - 4px)");
@expanded-detail-padding-x: var(--expanded-detail-padding-x, 25px);
@expanded-detail-padding-y: 25px;
@feeds-toggle-width: var(--feeds-toggle-width, @base-spacing);
@feeds-spacing: var(--content-spacing, calc(@feeds-toggle-width - 8px));
@font-size-post: var(--font-size-post);
@fonts-ui: var(--fonts-ui); // also used in defines.less
@fonts-content: var(--fonts-content);
@fonts-heading: var(--fonts-heading);
@fonts-mono: var(--fonts-mono);
@reading-width: var(--reading-width);
@card-max-column-count: var(--card-max-column-count);
@card-min-column-width: var(--card-min-column-width);
@card-target-column-width: ~"(var(--card-target-column-width))";

@fade1: (55% / 15);
@fade2: (100% / 15);
@fade3: (200% / 15);
@fade4: (300% / 15);
@fade5: (400% / 15);
@fade6: (600% / 15);
@fade7: (900% / 15);
@fade8: (1100% / 15);
@fade9: (1300% / 15);

@black: #000;
@white: #fff;
@green: #6b5;
@orange: #e84;
@yellow: #db0;
@red: #d45;

@default-fg: @black;
@default-bg: @white;
@bg-read: @default-bg;
@bg-unread: @default-bg;
@color-marked: @green;
@color-published: @orange;
@color-selected: @yellow;
@color-checked: @color-accent;
@color-error: @red;
@color-input: lighten(@default-bg, @fade1);
@color-button: mix(@default-fg, @default-bg, @fade2);
@color-button-hover: mix(@default-fg, @default-bg, ((@fade1 + @fade4) / 2));
@color-button-active: shade(@default-bg, @fade4);

@color-fade0: fade(@default-fg, 0%);
@color-fade1: fade(@default-fg, @fade1);
@color-fade2: fade(@default-fg, @fade2);
@color-fade3: fade(@default-fg, @fade3);
@color-fade4: fade(@default-fg, @fade4);
@color-fade5: fade(@default-fg, @fade5);
@color-fade6: fade(@default-fg, @fade6);
@color-fade7: fade(@default-fg, @fade7);
@color-fade8: fade(@default-fg, @fade8);

@color-panel-bg: @color-fade2;
@border-default: @color-fade2;
@border-darker: @color-fade3;
@color-feeds-icon: @color-fade4;
@color-icon: @color-fade5;
@color-icon-hover: @color-fade6;
@fg-text-muted: @color-fade6;
@feeds-text: @color-fade7;
@default-text: @color-fade8;

@font-size-main: @font-size-toolbar;
@headline-height: @base-spacing;

// selects all dijit buttons, excluding:
// .dijitComboBox .dijitButtonNode
// .dijitSelect .dijitButtonContents,
// .dijitSelect .dijitButtonNode,
// .dijitSpinner .dijitArrowButton,
@button-selector: ~":is(.dijitButton, .dijitComboButton, .dijitDropDownButton, .dijitToggleButton) .dijitButtonNode";

.color-buttons(@bg-color) {
  &@{button-selector} {
    background-color: @bg-color;
  }
  &:not(.dijitComboButton):is(.dijitFocused, .dijitHover)@{button-selector},
  &.dijitComboButton :is(.dijitButtonNodeHover, .dijitDownArrowButtonFocused, .dijitDownArrowButtonHover),
  &.dijitComboButton .dijitButtonNode:has(.dijitButtonContentsFocused) {
    background-color: shade(@bg-color, 15%);
  }
  &:not(.dijitComboButton).dijitActive@{button-selector},
  &.dijitComboButton :is(.dijitButtonNodeActive, .dijitDownArrowButtonActive) {
    background-color: shade(@bg-color, 30%);
  }
}

.heading-font-size(@level: 0) {
  @font-size: ~"(@{font-size-post} + 10px - @{level} * 2px)";

  font-size: calc(@font-size);
  line-height: calc(@font-size + 6px);
}

.reading-width() {
  max-width: calc(@font-size-post * @reading-width);
}

.interactive-icon(@color: @color-icon) {
  transition: color 0.2s;
  color: @color;

  @media (hover: hover) {
    &:hover {
      color: @color-icon-hover;
    }
  }
}

.media(@from, @rules) {
  .media(@from, @to: 0, @rules);
}
.media(@from, @to, @rules) {
  @breakpoints: {
    @0: 0;
    @sm: @breakpoint-sm;
    @md: @breakpoint-md;
    @lg: @breakpoint-lg;
    @xl: @breakpoint-xl;
  };
  .return() when (@from = 0) {
    @media (max-width: @breakpoints[@@to]) {
      @rules();
    }
  }
  .return() when (@to = 0) {
    @media (min-width: @breakpoints[@@from] + 1) {
      @rules();
    }
  }
  .return() when (default()) {
    @media (min-width: @breakpoints[@@from] + 1) and (max-width: @breakpoints[@@to]) {
      @rules();
    }
  }
  .return();
}

// TODO: rework once https://github.com/less/less.js/issues/3766 is solved
// mixin to add whole selector chain to @contaier query to work around less not inheriting the selector
// using plugin https://github.com/seven-phases-max/less-plugin-reflections to save selector to a variable
// as suggested here: https://github.com/less/less.js/issues/3053#issuecomment-299707813
@plugin 'reflections'; // this implements `current-selector()`
.container(@from, @rules) {
  .container(@from, @to: 0, @rules);
}
.container(@from, @to, @rules) {
  @selector: current-selector();

  .return(@selector) when (@from = 0) {
    @container (max-width: @to) {
      @{selector} {
        @rules();
      }
    }
  }
  .return(@selector) when (@to = 0) {
    @container (min-width: @from) {
      @{selector} {
        @rules();
      }
    }
  }
  .return(@selector) when (default()) {
    @container (min-width: @from) and (max-width: @to) {
      @{selector} {
        @rules();
      }
    }
  }
  .return(@selector);
}

// based on https://bitbucket.org/pixelass/homeless/src/master/src/repeat/repeat.less
.repeat(@string, @n, @rules) {
  .repeat(@string, "", @n, @rules);
}
.repeat(@string, @separator, @n, @rules) {
  .reduce(@acc, @cur, @separator, @i) when (@i > 0) {
    .return(@result, @i) when (@i = 1) {
      @rules();
    }
    .return(e(@acc), @i);
    .reduce("@{acc}@{separator}@{cur}", @cur, @separator, @i - 1);
  }
  .reduce(@string, @string, @separator, @n);
}
